# Database for Measurement Computing waveform generator
# Mark Rivers
# November 6, 2011

###################################################################
#  Number of points to use                                        # 
###################################################################
record(longin, "$(P)$(R)NumPoints")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_NUM_POINTS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Number of points to use for user-defined waveforms             # 
###################################################################
record(longout, "$(P)$(R)UserNumPoints")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_USER_NUM_POINTS")
    field(VAL,  "1000")
}

###################################################################
#  Number of points to use for pre-defined waveforms             # 
###################################################################
record(longout, "$(P)$(R)IntNumPoints")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_INT_NUM_POINTS")
    field(VAL,  "1000")
}

###################################################################
#  Timebase waveform record for user waveforms                    #
###################################################################
record(waveform, "$(P)$(R)UserTimeWF")
{
    field(FTVL, "FLOAT")
    field(DTYP, "asynFloat32ArrayIn")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_USER_TIME_WF")
    field(NELM, "$(MAX_POINTS)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Timebase waveform record for predefined waveforms              #
###################################################################
record(waveform, "$(P)$(R)IntTimeWF")
{
    field(FTVL, "FLOAT")
    field(DTYP, "asynFloat32ArrayIn")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_INT_TIME_WF")
    field(NELM, "$(MAX_POINTS)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Current point                                                  # 
###################################################################
record(longin, "$(P)$(R)CurrentPoint")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_CURRENT_POINT")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Waveform frequency, based on IntFreq or UserFreq               # 
###################################################################
record(ai, "$(P)$(R)Frequency")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_FREQ")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Time per point readback, based on UserDwell or IntDwell        # 
###################################################################
record(ai, "$(P)$(R)Dwell")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_DWELL")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Total time                                                     # 
###################################################################
record(ai, "$(P)$(R)TotalTime")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_TOTAL_TIME")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Internal waveform frequency                                    # 
###################################################################
record(ao, "$(P)$(R)IntFrequency")
{
    field(PINI, "YES")
    field(OUT,  "$(P)$(R)SendIntFrequency PP MS")
    field(VAL,  "1000.")
    field(PREC, "$(PREC)")
}

###################################################################
#  Send internal waveform frequency                               # 
###################################################################
record(ao, "$(P)$(R)SendIntFrequency")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_INT_FREQ")
    field(SDIS, "$(P)$(R)IntFrequencyRBV.PROC")
    field(DISV, "1")
}

###################################################################
#  Internal frequency readback                                    # 
###################################################################
record(ai, "$(P)$(R)IntFrequencyRBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_INT_FREQ")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)$(R)IntFrequencySync")
}

###################################################################
#  Internal frequency sync                                        # 
###################################################################
record(ao, "$(P)$(R)IntFrequencySync")
{
    field(DOL,  "$(P)$(R)IntFrequencyRBV NPP")
    field(OMSL, "closed_loop")
    field(OUT,  "$(P)$(R)IntFrequency PP")
}

###################################################################
#  Internal waveform dwell                                        # 
###################################################################
record(ao, "$(P)$(R)IntDwell")
{
    field(PINI, "YES")
    field(OUT,  "$(P)$(R)SendIntDwell PP MS")
    field(VAL,  "1000.")
    field(PREC, "$(PREC)")
}

###################################################################
#  Send internal waveform dwell                                   # 
###################################################################
record(ao, "$(P)$(R)SendIntDwell")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_INT_DWELL")
    field(SDIS, "$(P)$(R)IntDwellRBV.PROC")
    field(DISV, "1")
}

###################################################################
#  Internal dwell readback                                        # 
###################################################################
record(ai, "$(P)$(R)IntDwellRBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_INT_DWELL")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)$(R)IntDwellSync")
}

###################################################################
#  Internal dwell sync                                            # 
###################################################################
record(ao, "$(P)$(R)IntDwellSync")
{
    field(DOL,  "$(P)$(R)IntDwellRBV NPP")
    field(OMSL, "closed_loop")
    field(OUT,  "$(P)$(R)IntDwell PP")
}

###################################################################
#  User waveform frequency                                        # 
###################################################################
record(ao, "$(P)$(R)UserFrequency")
{
    field(PINI, "YES")
    field(OUT,  "$(P)$(R)SendUserFrequency PP MS")
    field(VAL,  "1000.")
    field(PREC, "$(PREC)")
}

###################################################################
#  Send user waveform frequency                                   # 
###################################################################
record(ao, "$(P)$(R)SendUserFrequency")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_USER_FREQ")
    field(SDIS, "$(P)$(R)UserFrequencyRBV.PROC")
    field(DISV, "1")
}

###################################################################
#  User frequency readback                                        # 
###################################################################
record(ai, "$(P)$(R)UserFrequencyRBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_USER_FREQ")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)$(R)UserFrequencySync")
}

###################################################################
#  User frequency sync                                            # 
###################################################################
record(ao, "$(P)$(R)UserFrequencySync")
{
    field(DOL,  "$(P)$(R)UserFrequencyRBV NPP")
    field(OMSL, "closed_loop")
    field(OUT,  "$(P)$(R)UserFrequency PP")
}

###################################################################
#  User waveform dwell                                            # 
###################################################################
record(ao, "$(P)$(R)UserDwell")
{
    field(PINI, "YES")
    field(OUT,  "$(P)$(R)SendUserDwell PP MS")
    field(VAL,  "1000.")
    field(PREC, "$(PREC)")
}

###################################################################
#  Send user waveform dwell                                       # 
###################################################################
record(ao, "$(P)$(R)SendUserDwell")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_USER_DWELL")
    field(SDIS, "$(P)$(R)UserDwellRBV.PROC")
    field(DISV, "1")
}

###################################################################
#  User dwell readback                                            # 
###################################################################
record(ai, "$(P)$(R)UserDwellRBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))WAVEGEN_USER_DWELL")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)$(R)UserDwellSync")
}

###################################################################
#  User dwell sync                                                # 
###################################################################
record(ao, "$(P)$(R)UserDwellSync")
{
    field(DOL,  "$(P)$(R)UserDwellRBV NPP")
    field(OMSL, "closed_loop")
    field(OUT,  "$(P)$(R)UserDwell PP")
}

###################################################################
#  External trigger                                               # 
###################################################################
record(bo, "$(P)$(R)ExtTrigger")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_EXT_TRIGGER")
    field(ZNAM, "Internal")
    field(ONAM, "External")
}

###################################################################
#  External clock                                                 # 
###################################################################
record(bo, "$(P)$(R)ExtClock")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_EXT_CLOCK")
    field(ZNAM, "Internal")
    field(ONAM, "External")
}

###################################################################
#  External trigger                                               # 
###################################################################
record(bo, "$(P)$(R)Continuous")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_CONTINUOUS")
    field(ZNAM, "One-shot")
    field(ONAM, "Continuous")
}

###################################################################
#  Retrigger                                                      # 
###################################################################
record(bo, "$(P)$(R)Retrigger")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_RETRIGGER")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

###################################################################
#  Trigger count                                                  # 
###################################################################
record(longout, "$(P)$(R)TriggerCount")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_TRIGGER_COUNT")
    field(VAL,  "1")
}

###################################################################
#  Run                                                            # 
###################################################################
record(busy, "$(P)$(R)Run")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))WAVEGEN_RUN")
    field(ZNAM, "Stop")
    field(ONAM, "Run")
}


